import argparse
import os
from pathlib import Path

# original
# BASE_DATA_DIR = "/data/evaporate/"
# Path("~/data/evaporate/").expanduser()
# BASE_DATA_DIR = Path("~/data/evaporate/data/").expanduser()
# HOME = Path('~/').expanduser()

def get_args(database_name):
    
    parser = argparse.ArgumentParser(
        "LLM explorer.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "--overwrite_cache",
        type=bool,
        default=0,
        help="Whether to overwrite the caching for prompts."
    )

    parser.add_argument(
        "--data_lake",
        type=str,
        default="fda_510ks",
        help="Name of the data lake"
    )

    parser.add_argument(
        "--data_dir",
        type=str,
        help="Path to raw data-lake documents",
    )

    parser.add_argument(
        "--generative_index_path",
        type=str,
        help="Path to store the generated structured view of the data lake",
    )

    parser.add_argument(
        "--cache_dir",
        type=str,
        default=".cache/",
        help="Path to cache intermediate files during system execution",
    )

    parser.add_argument(
        "--set_dicts",
        type=str,
        default='',
        help="Alternate valid names for the SWDE attributes as provided in the benchmark.",
    )

    parser.add_argument(
        "--topic",
        type=list,
        default=[],
        help="Topic of the data lake",
    )

    # CONSTANTS = {
    #     "fda_510ks": {
    #         "data_dir": str(BASE_DATA_DIR / "fda_510ks/data/evaporate/fda-ai-pmas/510k"),  # raw data
    #         "database_name": "fda_510ks",
    #         "cache_dir": ".cache/fda_510ks/",
    #         "generative_index_path": str(BASE_DATA_DIR / "generative_indexes/fda_510ks/"),  # 
    #         "gold_extractions_file": str(BASE_DATA_DIR / "ground_truth/fda_510ks_gold_extractions.json"),  # todo
    #         "topic": "fda 510k device premarket notifications",
    #     },
    # }
    BASE_DATA_DIR = Path("~/data/evaporate/data/").expanduser()
    HOME = Path('~/').expanduser()

    # - Rudin chapter 1 md
    rudin_chapter1_md = {
            # point to the dir where the text files you want to use are
            "data_dir": str(HOME / "data/maf/textbooks/rudin/rudin_chapter1/md/"),
            "database_name": "rudin_chapter1_md",
            "cache_dir": ".cache/" + "data/maf/textbooks/rudin/rudin_chapter1/md/",
            "generative_index_path": str(BASE_DATA_DIR / "generative_indexes/maf/textbooks/rudin/rudin_chapter1/md/"),
            "gold_extractions_file": str(BASE_DATA_DIR / "ground_truth/maf/textbooks/rudin/rudin_chapter1/md/gold_extractions.json"),
            "topic": "rudin text generated by mathpix https://snip.mathpix.com/search",
        }
        
    CONSTANTS = {
        "fda_510ks": {
            "data_dir": str(BASE_DATA_DIR / "fda_510ks/data/evaporate/fda-ai-pmas/510k"),  # raw data
            "database_name": "fda_510ks",
            "cache_dir": ".cache/fda_510ks/",
            "generative_index_path": str(BASE_DATA_DIR / "generative_indexes/fda_510ks/"),  # 
            "gold_extractions_file": str(BASE_DATA_DIR / "ground_truth/fda_510ks_gold_extractions.json"),  # todo
            "topic": "fda 510k device premarket notifications",
        },
        "small_debug_lin_alg_textbook": {
            "data_dir": str(HOME / "evaporate/debug_data/small_debug_lin_alg_textbook"),
            "database_name": "small_debug_lin_alg_textbook",
            "cache_dir": ".cache/small_debug_lin_alg_textbook/",
            "generative_index_path": str(BASE_DATA_DIR / "generative_indexes/small_debug_lin_alg_textbook/"),
            "gold_extractions_file": str(BASE_DATA_DIR / "ground_truth/small_debug_lin_alg_textbook_gold_extractions.json"),
            "topic": "small gpt4 generated linear algebra synthetic textbook",
        },
        "rudin_chapter1_md": rudin_chapter1_md,
    }

    args = parser.parse_args(args=[])

    args_fill = CONSTANTS[database_name]
    args.data_dir = args_fill["data_dir"]
    args.cache_dir = args_fill["cache_dir"]
    args.generative_index_path = args_fill["generative_index_path"]
    args.topic = args_fill['topic']
    args.gold_extractions_file = args_fill['gold_extractions_file']
    args.data_lake = database_name
    if 'set_dicts' in args_fill:
        args.set_dicts = args_fill['set_dicts']

    return args
